@{
    ViewBag.Title = "Home Page";
}

<div class="col-md-4">
    <div class="panel panel-default">
        <div class="panel-heading">
            <label>Opciones</label>
        </div>
        <div class="panel-body">
            <form class="form-horizontal">
                <div class="form-group col-md-8">
                    <label class="control-label">Color:</label>
                    <input type='text' id="color" />
                </div>
                <div class="form-group col-md-12">
                    <label class="control-label">Tamaño:</label>
                    <div id="size"></div>
                </div>
                <div class="form-group col-md-8">
                    <label class="control-label">Reiniciar: </label>
                    <div id="clear" class="btn btn-danger">Do it!</div>
                </div>
            </form>
        </div>
        <div class="panel-footer">
            <div class="form-group" style="margin:0px;">
                <label>Usuarios conectados: <span id="usuariosConectados">0</span></label>
            </div>
        </div>
    </div>
</div>

<canvas id="testCanvas" width="1140" height="600"></canvas>

@section scripts{    
<script src="@Url.Content("~/Content/spectrum/spectrum.js")"></script>

<script type="text/javascript">
    $(document).ready(function () {
        var myCanvas = $('#testCanvas');
        var colorPicker = $("#color");
        var sizeElement = $("#size");
        var usuariosLabel = $("#usuariosConectados");
        myCanvas.css('background-color', '#333');
        myCanvas.css('border-radius', '4px');
        
        if (myCanvas) {
            var isDown = false, coordinates = [];
            var ctx = myCanvas[0].getContext("2d");
            var canvasX, canvasY;
            ctx.lineWidth = 30;
            ctx.lineJoin = ctx.lineCap = 'round';
            ctx.strokeStyle = "#e36";

            $(myCanvas)
            .mousedown(function (e) {
                isDown = true;
                coordinates.push({ x: e.pageX - myCanvas[0].offsetLeft, y: e.pageY - myCanvas[0].offsetTop });
            })
            .mousemove(function (e) {
                if (isDown != false) {
                    if (coordinates.length < 120) {
                        coordinates.push({ x: e.pageX - myCanvas[0].offsetLeft, y: e.pageY - myCanvas[0].offsetTop });
                    }
                    drawArray(coordinates, colorPicker.spectrum('get').toHexString(), sizeElement.slider( "option", "value" ));
                }
            });
            
            function drawArray(pointsArray, color, width) {
                ctx.beginPath();
                ctx.lineWidth = width;
                ctx.strokeStyle = color;
                ctx.moveTo(pointsArray[0].x, pointsArray[0].y);
                for (var i = 1; i < pointsArray.length; i++) {
                    ctx.lineTo(pointsArray[i].x, pointsArray[i].y);
                }
                ctx.stroke();
                ctx.closePath();
            };

            // draw client count
            function updateTextCount(count) {
                usuariosLabel.text(count);
            }

            // clear canvas
            function clearCanvas() {
                ctx.clearRect(0, 0, myCanvas[0].width, myCanvas[0].height);                
            };

            $("#clear").click(function () {
                clearCanvas();
            });

            // color picker
            colorPicker.spectrum({
                color: "#e36",
                change: function (color) {                    
                    ctx.strokeStyle = color.toHexString();
                }
            });

            // slider
            $("#size").slider({
                orientation: "horizontal",
                range: "min",
                max: 50,
                value: ctx.lineWidth
            });

            // signalR code
            $.connection.hub.logging = true;

            var hub = $.connection.drawingBoard;
            var connected = false;
            
            $(document).mouseup(function (e) {
                $.connection.hub.log(JSON.stringify(coordinates));
                if (coordinates.length > 2) {
                    hub.server.broadcastArray(coordinates, colorPicker.spectrum('get').toHexString(), sizeElement.slider("option", "value"));
                }
                isDown = false;
                coordinates.length = 0;
            });

            $("#clear").click(function () {
                if (connected) {
                    hub.server.broadcastClear();
                }
            });

            // Event handlers
            hub.client.clear = function () {
                clearCanvas();
            };
                        
            hub.client.drawArray = function (array, dcolor, size) {
                drawArray(array, dcolor, size);
            };

            hub.client.updateClientCount = function (count) {
                updateTextCount(count);
            };

            hub.client.updateBoard = function (array){
                array.forEach(function (element) {
                    drawArray(element.points, element.color, element.size);
                });
            };

            // Starts the connection!            
            $.connection.hub.start()
            .done(function () {
                connected = true;
            });
        }

    });
</script>
}